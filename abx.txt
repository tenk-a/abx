ファイル名埋め込みテキスト（バッチ）生成実行ツール

                              abx v3.96 (pre v4)

※ v3.9x は以前とは細かな部分で仕様が変わっていっています(進行中)


■  はじめに

    abx は以下のように使えます。

      [1] どっかのディレクトリにある、とあるファイルを探す。

            例) abx -r /hoge/filename.ext
                /hoge ディレクトリ下のどこかにある filename.ext を探す.

      [2] 指定ファイル名を検索し, 該当ファイル名の各々に対し、某かの
          コマンドを実行するバッチを生成する。

	    例)	abx *.txt =nkf -Sw -O @x.utf8 @c >a.bat
	    例) abx -o a.bat *.txt =nkf -Sw -O @x.utf8 @c

	    	(nkfによる一括 sjis->utf8 テキスト変換)
	    	カレントディレクトリにある*.txtファイルを検索して
	    	ファイルごとに
	          nkf -O hoge.utf8 hoge.txt
	    	のような文字列を生成、a.bat に出力.

      [3] 指定ファイル名を検索し, 該当ファイル名の各々に対し、某かの
          コマンドを実行するバッチを生成し、そく実行する。

	    例)	abx -x *.txt =nkf -Sw -O @x.utf8 @c
	    	カレントディレクトリにある*.txtファイルをutf8に
	    	変換するバッチをテンポラリディレクトリに生成して
	    	即実行.

      [4] そのディレクトリにあるすべての *.jpg ファイルを整列して
          100番からの4桁の連番の名前に rename する。

            例) abx -x -s -ci100 *.jpg =rename @c @+4i.bmp

      [5] 複数の変換方法を記述した定義ファイルを用意し、そのうち１つ
          の変換方法を用いて、検索したファイルに対し某かのコマンドを
          実行するバッチを生成／実行する。

            例) abx +abx_cg :jpg2png *
                定義ファイル abx_cg.cfg で定義された変換方法 :jpg2png
                を用いて、.jpg ファイルを .png ファイルに変換する。
            例) abx :jpg:png *
                定義ファイル名が abx.cfg で変換方法名が :jpg:png の場合



■  起動方法

      abxの使い方は大別して、■はじめに、に書いた[1]～[4] のように、
    その場でちょこちょこっと変換方法を指定してバッチを作るばあいと、
    [5] のように予め変換方法を集めた定義ファイルを作ってそれを用いる
    場合の２つに別れます。

      コマンドラインでの指定方法は以下のような感じです。

        (1) abx [-オプション] [ファイル名] =変換文字列
            abx [-オプション] '変換文字列' [ファイル名]
            abx [-オプション] -k="変換文字列" [ファイル名]

        (2) abx [+cfgFILE] :変換名 [-オプション] [ファイル名]

    オプションとファイル名は順番が混ざっていてもかまいません。
    オプションを処理したあと、まとめてファイル名の処理をします。

    (1),(2)とも上記以外に@RESFILEでのレスポンスファイル指定も
    あります（-オプションと一緒に処理されます）。

    =変換文字列 は、 =以降を変換文字列として扱います。
    -k="変換文字列" か '変換文字列' ならばどの位置でもかまいません。
    ただ'変換文字列'は bash等の環境では "'変換文字列'" のように " で
    囲む必要があります。

    変換文字列を複数した場合の挙動は不定です。

    変換文字列では @ または $ で始まる指定を用いてファイルに絡んだ
    文字列置換が行えます。

      変換文字列指定が省略された場合で定義ファイル／レスポンスファ
    イルにも記述されていない場合、かつ -r が指定されていれば =@f（フ
    ルパス表示）が、-rがなければ =@c (ファイル名表示)が指定されたこと
    になります。



■  ファイル名指定：

      windows のワイルドカード指定 * ? が有効です。
      linux(unix系)ではシェルによるワイルドカード展開が行われるので
    再帰等でワイルドカード指定する場合は"でパス指定を囲ってください。

      ファイル名は複数指定できますが、名前がダブっているかどうかなど
    はチェックしていませんので気おつけてください。とくにワイルドカー
    ド指定時や-r指定をして、バッチ実行の場合、とりかえしのつかない
    事態になるかもしれません。
    ※ ソート指定の場合は同一フルパス名のダブリをなくします。

      また -r を指定した場合、指定されたファイル名各々について、ディ
    レクトリ検索を行います... ので、可能な限り少ないファイル名数で指
    定したほうが早く処理できます。



■  -オプション

    -で始まるオプションは以下のものがあります。
    （/ はオプションではなく、パスの区切りとして使われます）

	-k[@$RFULBby][="変換文字列"]
                  @ $            変換指定文字を @ か $ にする
                  R F U L B b y  パス名変換指定の補助指定の
                                 デフォルトを設定

        -x        バッチ実行する   -x- しない
                  テンポラリ・ディレクトリに abx-???????.bat という
                  バッチ・ファイルを生成し、そのバッチを実行します。
                  正常にバッチが終了した場合はテンポラリのバッチを
                  削除して終了します。

        -xm[N]    -x を１ファイル変換を単位に、マルチスレッドで
                  バッチ実行します。

        -r        ディレクトリ再帰検索する。 -r- しない
                  ファイル検索において、指定ディレクトリだけでなく、
                  その下にあるサブディレクトリに対しても検索を行いま
                  す。

        -a{d|f|h|p}[:N]
                  大雑把な検索ファイルの属性指定.

                  d       ディレクトリ属性のファイルを検索対象
                  f       ディレクトリ以外の属性のものを検索
                  h       隠しファイル&システムファイルも検索対象
                  p       -r未指定(非再帰)検索時に "." ".." も対象

                  -p指定がない場合は -af 相当、全てを対象にする場合は
                  -adfh (-adfhp) を指定してください。

        -a[dfh:flags]   flags:rhsdaDntplcoievVxEPUAQ
                  win32ファイル属性指定.

        -z[N-M]   ファイル・サイズ Nバイト以上 Mバイト以下のファイル
                  を検索します(例:-z256-1024)。
                  -z10K-1M のように数字の後ろに K をつければ1000倍し、
                  M をつければ 1000x1000 倍した値となります。
                  -z10iK-1iM のように iK をつければ 1024 倍し、
                  iM をつければ 1024x1024 倍した値となります。
                  -zN-ならば N以上, -z-Mならば M以下となります。
                  N <= Mでないといけません。

        -d[A-B]   日付 A～Bの期間のファイルを検索します。
                  日付は、20150721 のように西暦下4桁,月2桁,日2桁の8桁
                  の数字で記述します(例:-d950101-950631)。
                  あるいは -d2015/07/21-2018/09/10 も可。さらに
                  -d20150721:01:05:04-2018/09/10:01
                  ※ 日付や時間の区切は/:.等の記号であれば可.
                     ただ - は範囲指定に使うので注意.
                  ファイルサイズの指定と同様に -dA-とすれば A 以降に
                  できたファイルに、-d-Bとすれば B以前にできたファイ
                  ルを検索します。

        -s{n|e|z|t|a|m}{rd}[-]
                  全てのマッチしたファイル名をソートします。
                  通常は昇順で、r を付加すれば、降順でソートします。
                  d をつけると名前ソートにおいてディレクトリを優先
                  するようになります。

                  n       ファイル名
                  m       ファイル名比較で数字列を数値として比較
                  e       拡張子
                  z       ファイル・サイズ(小さいもの順)
                  t       ファイル日付(古いもの順)
                  a       ファイル属性(osの値ままを比較)

                  これらの指定のなかったときは m が指定されたことにな
                  ります。また、e z t a でも比較結果が同一だった場合は
                  m での比較を行います。

                  例) abx -szr  *.*   カレント・ディレクトリのファイ
                                      ル名一覧を大きいサイズ順に表示

                  -s- ソートを抑止

        -n        ファイル名検索を行わず、指定された名前をそのまま生
                  成に用います。この指定がなければ実際に存在するファ
                  イル名のみ生成します。
                  レスポンスファイルよりファイル名を入力し、その存在
                  に関わらず変換を行いたい場合にもちいます。
                  ただし、実際にファイルがないと意味のない機能、
                  -r,-a,-z,-d,-s オプション機能は無視されます。

        -n-       ファイル名検索が行われるようにします（デフォルト).

        -ck       ascii 以外(0x80以上)の文字コードを含むファイル名に
                  マッチします。

                  例) abx -anrhsd -ck -r \      カレントドライブ中の
                                                日本語ファイル名 (デ
                                                ィレクトリ含) を探す.

        -ck-      日本語の交じっていないファイル名のみにマッチする

        -ci[N]    @i @I で連番を生成する場合の開始番号を指定します。

        -ci[N:M]  これを指定すると、指定したファイル名は無視され
                  ファイル名でなく、N～M までの連番数字を名前と
                  して実行します。

        -ct<FILE> 見つかったファイルが、このFILEより新しい場合のみ
                  実行します。
                  データコンバートでターゲットの FILEより ソース
                  データの日付のほうが新しいときのみ生成、と、いう
                  のを想定しています。
                  FILE として、ソース名を変形するための@名を使えます。
                  また、その名前は、@o で参照できます。

        -l[-]    レスポンスファイル入力で名前は行単位  -l- off

        -t<N>     最初の N個のみ処理する
                  ただし、ソートと同様、検索ファイル名１個でマッチし
                  かつ同一ディレクトリ内での最初の N個です。
                  複数の検索ファイル名をコマンドラインやレスポンス・
                  ファイルで指定した場合や -r を指定した場合は各ディ
                  レクトリごとに最初の N個を処理します。

        -o<FILE>  出力ファイル指定
                  生成した内容を<FILE>に出力します。
                  -x とは併用しないでください。

        -i<DIR>   検索ディレクトリ指定
                  ファイル指定で、相対パス指定されたファイル名の基準
                  ディレクトリをカレントでなく <DIR> にします。
                  絶対パス指定されたファイル名に対しては無効です。

        -w<DIR>   テンポラリ・ディレクトリ指定
                  バッチ実行や @w で参照されるテンポラリ・ディレクト
                  リを環境変数 TMP（またはTEMP）でなく <DIR>にします。

        -p<DIR>   @pで生成されるディレクトリ名を<DIR>に強制します。
                  主に定義ファイル中での指定を想定しています。

        -e<EXT>   デフォルト拡張子指定
                  指定されたファイル名に拡張子がついていないときに補
                  う拡張子を設定します。
                  主に定義ファイル中での指定を想定しています。
                  そのため特別に <EXT>として変数 @1～@9 を指定するこ
                  とができます。

        @<N>=[STR] <N>は 1～9 で、@1～@9 に文字列を設定します。
                  レスポンスファイル中の@<N>での使用を想定しています。
                  定義ファイル中では@<N>は別の役わりがあるので :変換名
                  指定とは併用しないでください（動作は不定です）

        :         .cfg 定義ファイル中の、変換名一覧を表示します。


      指定は、-x -r のように分けて指定してください。
      -xr のようにはできません。



■  変換文字列 －－  生成するテキスト（バッチ）の記述

    -k="変換文字列"  '変換文字列'  =変換文字列
    での変換文字列中、 @ か $ で始まる文字は変換指定になります。

    v3.9x以前は$のみでしたが、unix系のシェル環境では$の機能が
    バッティングするため、基本 @ を用いるように変更、互換性のため
    $ も使えるという扱いに変わりました。

    windows 環境では @ か $ の先に現れた方が用いられます。
    以外では@をデフォルトにしています。
    -k@ -k$ オプションで予め設定もできます。

     @変換文字として以下のものがあります。
    （@c @x @p 等の一部は filmtn(ファイルメンテナンス)のマクロをマネ
      させていただきました. が、用途の多様により非互換部分が多く)

     大文字小文字は区別されます。

        @f      フルパス(拡張子付)        例) d:\dir\dir2\filename.ext

        @g      フルパス(拡張子無)        例) d:\dir\dir2\filename

        @v      ドライブ                  例) d
                : は付かない。

        @p      ディレクトリ(ドライブ付)  例) d:\dir\dir2
                後ろに \ は付かない。
                コマンドラインで -p され
                た場合はそのディレクトリ.

        @d      ディレクトリ(ドライブ無)  例) \dir\dir2
                後ろに \ は付かない。

        @D      直上のディレクトリ名のみ  例) c:\aa\b.c -> aa

        @c      ファイル(拡張子付)        例) filename.ext

        @x      ファイル(拡張子無)        例) filename

        @e      拡張子                    例) ext
                . は付かない。

        @w      テンポラリ・ディレクトリ.
                コマンドラインで -w 指定時はその場所を、 なければ環境
                変数TMP(なければTEMP)の内容を、フルパスに変換したもの。
                後ろに \ は付かない。

	@o	-ct で指定したファイル.

        @z      ファイルサイズ(10進10桁)  例) 1048609
                桁数でKB等表記            例) @+8bz   1049KB
                桁数でKiB等表記           例) @+8Bz  1025KiB

        @Z      ファイルサイズ(16進 8桁)  例) 100021

        @j      日付.                     例)@j    2015-05-27
                                          例)@+8j  15-05-27 (70以上は1900年年代)
					  例)@+19j 2015-05-27 11:23:59
					  例)@+23j 2015-05-27 11:23:59.999

	@J	日付(ラベル化)		  例)@+23J 2001_03_21_23_56_39_987

        @a  	ファイル属性             (win @Ba, unix系 @ba に同じ)
	@ba 	unix系風ファイル属性     [ld]rwxrwxrwx
	@Ba 	win32主要ファイル属性    rhsdalcoievxpu
	@A  	ファイル属性(16進数)     25ffff7
	@BA 	win32 32bitファイル属性  rhs-daDntplcoievVxEPU-A--Q------

        @i      10進数で連番を生成.      例)     253
                                         例)@+5i 00253

        @I      16進数で連番を生成.      例)     FD

	@l      生の入力まま

        @1～@9  定義ファイルにおいては、変換名検索で{～}でマッチした
                文字列。1～9個まで。番号は出現順に振り当てられる.
                定義ファイル以外では、コマンドラインで @1=文字列 の
                ようにして設定された文字列.

        @@      @ そのもの

        @$      $ そのもの

        @n      改行

        @t      タブ

        @s      空白

        @]      >

        @[      <

        @`      '

        @^      "

        @#      #


□ 変換補助文字

     生成文字列を若干変えるために 変換指定文字の直前に指定する補助
     文字が使えます。

        y       パスの両端に"を付加      例) @yf    "c:\dir.a.txt"
        R       相対パス化します         例) @Rf  (カレント c:\a\b)
                                            c:\a\c\d.e -> ..\c\d.e
        F       フルパス化します         例) @Ff     c:\dir\a.txt
        b       パス区切りを / にします  例) @bf     c:/dir/a.txt
        B       パス区切りを \ にします  例) @Bf     c:\dir\a.txt
        U       大文字化します           例) @Uc     FILE.TXT
        L       小文字化します           例) @Lc     file.txt


□ 文字列の桁揃えについて

      @c, @x, @f, @g, @e, @p, @d, @j において桁数そろえる指定として
          @+13c
          @+31f
    のように、@と文字の間に+数字をおけば、その桁数に文字列が足りない
    場合空白を補います。その桁数より長い場合は文字列はそのままで切る
    ことはありません。

    なお日付文字列 @j に関しては、
          @+8j とすれば 97-10-31 に,
          @+5j にすれば 10-31 のように
    短くする指定となります。


□ 変換文字列について

      コマンドラインの '変換文字列'や =変換文字列指定において、連続し
    た空白(タブやスペース)を置いた場合、生成されたテキスト（バッチ）にで
    は、それらが１つの空白になったり、また、置いた覚えのない空白が挿
    入されたりするばあいがありますが、これらは仕様なので、気にしない
    でください:-）


□ 連番生成について

     @i,@I を指定すると、ファイル名ごとに、0から順に番号が生成され
     ます（-ciN により 0以外の数字から始められます）。
     以下のように

         abx -s *.jpg =ren @c cg_@+4i.@e

     して、連番でファイル名を一括で変名したりするのを想定しています。
     @i は@+4iのように桁指定すると、空白でなく0が補充されます。
    （cg_0012.jpgのように)



  また、-cN:M で -c100:999 のように終了番号を指定すると、指定された
  ファイル名は無視され、連番を名前として処理します。この場合は基本
  的に @f や @c は使わず @i,@I を用いてください。




■  レスポンス・ファイル

      レスポンス・ファイルは、コマンド・ラインで @resfile で指定され
    るファイルで、-オプション、ファイル、=変換文字列をそのファイルよ
    り読み込みます。

      =変換文字列以外に関しては、改行は空白とみなし、処理されます。
    また、# が見つかれば行末までをコメントとみなし空白として扱います。

      問題は = の扱いで、 コマンド・ラインとは少々違い、変換文字列の
    指定は = の直後からでなく、=のあった行の次の行から、ファイルの終
    わりまでとなります。また、改行が改行として扱われます（無理に@nと
    かを使う必要がなくなります）。#コメントも コメントでなくそのまま
    生成されます。ただし、行頭の#begin,#end,#bodyのみ判別され、その
    動作をします。

        例)  はじまめ、の [3]をレスポンスファイルに書き直すと、
                vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
                -eMKI           #デフォルト拡張子を MKI にする
                -x              # バッチ実行
                =               # この次の行からEOF までが変換文字列
                mag @f
                pi -s @g
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            で、ファイル名を mki2pi.res とすると、

                > abx @mki2pi.res *

            のようにできます。



■  定義ファイル(.cfg) を使うとき

      定義ファイルを用いた利用方法は以下のようになります。

        (2) abx [+cfgFILE] :変換名 [-オプション] [ファイル名]

    +cfgFILE で指定されるファイルが定義ファイルで拡張子は.cfg です。
    .cfg ファイルは、abx.exeと同じディレクトリに置く必要があります。
    （正確には、相対パス指定ならば abx.exeのあるディレクトリを基準に
    し、フルパス指定ならばそのパスより読込みます）

    この+ファイル指定は省略可能で、そのばあい abx.cfg が読込ます。

    :変換名 は : で始まり空白(スペース,タブ)以外の文字からなる文字列
    です.
    :変換名 は、.cfgファイル中で定義された変換名で、この :変換名が指
    定された段階で .cfg ファイルは読み込まれます（つまり、+cfgFILEが
    指定されても :変換名が指定されないと読み込まれません）。



■  定義ファイル(.cfg)の書き方

      定義ファイルは、早い話し、複数のレスポンス・ファイルを１つにま
    とめたものです。
      もちろん、単純にファイルを繋げただけでは、定義の区切りがわかり
    ませんので、各定義の先頭に :文字列で始まる行を置き（行頭に空白を
    入れられません）、それで判別します。

      実行時は、コマンドラインで :変換名が指定されれば、定義ファイル
    を読み込み、 行頭に : がある行を探し、あればコマンドラインで指定
    された変換名と同じかどうか比較し、同じであれば、その次ぎの行から
    の定義を利用します。
      一つの定義の終わりは 次の : で始まる行の直前までです。
    （正確には : の行の一つ前の行の改行の手前までです）。

      :で始まる行の文字列は、空白が現れるまでを比較の対象とします。
    大文字小文字は区別しませんし、{ | } 以外の記号を含めることも出来
    ます（{ | } については次項を参照）。
    でも漢字にはちゃんと対応していないので駄目です。

      定義ファイル中でも、# で始まり改行までを改行までをコメントとし
    ますが、おける場所は、定義ファイルの頭と、各定義での =の直前まで
    の部分です。（ファイルの先頭には必ず１行はコメントが必要です）。

        例)
                vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
                # 定義ファイル・サンプル
                :MKI2PI
                        -eMKI
                        -x
                        =
                        mag @f
                        pi -s @g

                :Q4toPI
                        -eMKI -x =
                        hsx @f
                        pi -s @g
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            で、ファイル名を abxtest.cfg で abx.exe と同じ場所におく
            とすると、

                > abx +abxtest :q4topi *

            のように使うことができます。



■  定義ファイルでの { | } を用いた :変換名 の指定

      この定義ファイルは、もともと画像や音楽ファイル等のファイル変換
    を想定して用意した機能で、いくつかのコンバータ(ソフト)を組み合わ
    せて使うことにより、より多くの種類間のコンバートを手軽に行おうと
    いうものです。

      これらの変換においては、データの種類は拡張子名で判別されること
    が多く、また、１つのコンバータ(ソフト)で複数の種類に対応している
    ものも結構あり、定義ファイルの定義において、単純な文字列比較だけ
    で記述すると、同じような定義を山ほど書くことになりたいへんなので、
    少し楽できる機能として次のようなものがあります。

     :変換名中の一部を {STR1|STR2|STR3} のように記述することにより、
    {～} 中 | で区切られた何れかの文字列にマッチするようにし、マッチ
    した場合はマッチした文字列を変数 @1～@9 に設定するようにしました。
    （{～}の数は 9個まで。先頭から順に番号が1～9まで振り当てられます）
      @1～@9 は、変換文字列中（あと特別に -e で）に使用できます。

      コマンドラインでの @N=文字列 指定と、:変換名指定の併用はしない
    でください。動作は不定です。


        例)
                vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
                # 定義ファイル・サンプル
                :PIC:{tif|bmp|rgb|q0|djp}                         #1
                        -x -ePIC =
                        picld .@1 @g

                :PIC:{mag|pi}                                     #2
                        -x -ePIC =
                        picld .pmt @f -o@w\@x.pmt
                        mg .pmt.@1 @w\@x.pmt -o@g.@1
                        del @w\@x.pmt

                :{q0|rgb|bmp|djp}:PIC                             #3
                        -x -e@1 =
                        picsv .@1 @g

                :{mag|pi}:PIC                                     #4
                        -x -e@1 =
                        mg .@1.pmt @g.@1 -o@w\@x.pmt
                        picsv .@1 @w\@x.pmt -o@g.pic
                        del @w\@x.pmt

                :{mag|pi|bmp|tif|djp}:{mag|pi|bmp|tif|djp|q0|rgb} #5
                        -x -e@1 =
                        mg .@1.@2 @g -o@g.@2
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            で、ファイル名を abx.cfg で abx.exe と同じ場所におくとす
            ると、

                > abx -r :mag:pic *

            のように使うことができます。このばあい、#4の行でマッチし、
            mg でmagファイルを適当な中間ファイル形式にしてテンポラリ
            ・ディレクトリに生成し それを picsv が読み込み元のディレ
            クトリに picファイルを生成します。あと作業ファイルを削除
            します（-rを指定しているので、カレント・ディレクトリ以下
            のディレクトリに対して行うことになる）



■  { | }でマッチした文字列に従い、別の文字列を使いたいとき

      前項において、{ | } でマッチした文字列を @1 ～ @9 に代入すると
    いいましたが、実際のところ、それだけでは使い道が少ないです。

      そこで、{ | } 中の何番目の文字列にマッチしたかを利用して、別の
    { | }中のその位置の文字列を選択し、余っている@変数に代入できるよ
    うにしました。書き方は、

        @Ｍ:Ｎ{STR1:STR2:...}
                        # Ｍ,Ｎ : 1～9

    といった感じで、オプション指定に混ぜて（つまり =が現れるまでに）
    指定します。
      変換名中に指定されたＮ番目の { | } のマッチした位置と同じ位置の
    { | } 中の文字列を変数 @Ｍ に代入します。

        例)
                vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                :JPG:{Q1|RGB|PPM}
                        -e@1 -x @2:1{-F|-i|-P} =
                        jld @2 @p\@x.@1
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        という変換があり、コマンドラインで :JPG:RGB が指定されたなら、
                @1には RGB が入り、@2 には -i が入ります。



■  コマンドラインの -p<DIR>指定、定義ファイル中の @p 指定

      定義ファイルに画像コンバート等の定義を書いて使うとき、元画像と
    同じディレクトリに変換後のファイルを生成したい場合と、まったく別
    のディレクトリに生成したい場合があります。
      そのような目的のために、@p をコマンドラインで -p<DIR> で強制的
    に変更できるようにしました。

      定義ファイル中では最終的に生成するファイルのディレクトリを@pを
    用いて記述しておけば、普段は、変換元と同じディレクトリに、 -p で
    ディレクトリを指定すればそのディレクトリに生成するようになります。

      -p と -r を指定をしたばあいで、入力時が違うディレクトリでも -p
    で指定されたディレクトリに階層が作られるわけでなくすべてその１つ
    のディレクトリに生成されることになります。



■  レスポンス・ファイル中での特殊指定

      v3.00 以前、何某かのファイル名一覧による定義ファイルを生成する
    とき、ファイル一覧部を abx で生成しその前後にテキストを付けたい
    場合、他のファイルを前後に付けるバッチを組んだりしてたのですが、
    ファイルの本数増えて嫌だしよくある?作業なので、abx のみでできる
    よう、レスポンスファイル中に前後につけるテキストを指定できるよう
    にしました。
            #begin
                直前に出力するテキスト
            #end
                直後に出力するテキスト
            #body
                #begin,#end以外の本来のオプション、ファイル名指定用

    #body,#begin,#end は行頭のみ指定可能で、他の指定が現れるまでその
    状態になります。デフォルトは #body です。
    #begin,#end でのテキストでは、@@,@1～@9 のみが指定可能で、かつ
    @1～@9 はコマンドラインで指定したものを想定しています。

        例)
                vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                # リンクファイル生成
                        -n
                        =
                        INPUT @C
                #begin
                        ;リンク
                        INPUT c:\a\lib\start.obj
                #end
                        LIB    c:\a\lib\ccc.lib
                        OUTPUT @1.bin
                        MAP    @1.map
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



■  使用上の注意(制限)など

      ・-xでバッチ実行を行うことを想定して、必ず環境変数 TMP(かTEMP)
        か -w でテンポラリ・ディレクトリを指定しておいてください。

        テンポラリ・ディレクトリは、生成したバッチの影響をうけない独
        立したディレクトリをちゃんと用意してください（入力ファイル、
        出力ファイルのあるディレクトリに絶対ならないようにしてくださ
        い）。

      ・-x をすると、テンポラリに abx-????.txtというファイルが作られ
        ますが実行後に削除するようなことはしてません。

      ・このプログラムでは指定されたファイル名は一旦フルパスに変換さ
        れるのですが、最大長として 1024バイト位以下であることを前提
        としています。現状普段のwindowsの制限では260なので問題は
        ないですが、長い名前の方法もあるためカセになる可能性も。

      ・@1～@9 の各サイズも 1000バイト位です。

      ・定義ファイルの先頭一行は必ずコメントが必要です。プログラム的
        なことをいえば、行頭の : を探すのに単に strstr(buf,"\n:") を
        してるだけだからです. また、その絡みで :変換名の前行は、空行
        でないと駄目でしょう。

      ・定義ファイルの最大サイズは、500Kバイトくらいです。それ以上
        あっても読み込みません。

      ・１ファイル名あたりに生成されるテキストの最大サイズも500Kバイ
        トくらいです。

      ・定義ファイルは abx.cfg とすることで コマンドラインでの指定を
        省略できますが、実は実行ファイル名の拡張子を.cfgに取り替えた
        ファイル名であればよく、逆に、実行ファイル名を定義ファイルご
        とに変えて用意する、という方法もあります。



■  おわりに

      ver. 3.14 より二条項BSDライセンスに変更し、
      ver. 3.90(pre4) より Boost Software License Version 1.0
      に再度変更しました。

      ※ v3.9x は破壊的な仕様変更が入ってきています。


                                    Masashi Kitamura  tenka@6809.net
                                           http://www.6809.net/tenk/
                                      https://github.com/tenk-a/abx/
